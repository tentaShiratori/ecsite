name: cdk

on:
  push:
    branches:
        - main
  pull_request:
env:
  AWS_REGION: "ap-northeast-1"
  ECR_REPOSITORY: "nextjs"
  IMAGE_TAG: ${{ github.sha }}  
jobs:
  aws_cdk:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: 19
          cache: yarn
          cache-dependency-path: | 
            resource/yarn.lock

      - name: Setup dependencies
        working-directory: resource
        run: yarn install --frozen-lockfile

      - name: Build
        working-directory: resource
        run: yarn build

      - name: Unit tests
        if: contains(github.event_name, 'pull_request')
        working-directory: resource
        run: yarn test

      - name: CDK Diff Check
        if: contains(github.event_name, 'pull_request')
        working-directory: resource
        run: yarn cdk:diff
        env:
          AWS_DEFAULT_REGION: 'ap-northeast-1'
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: CDK Deploy
        if: contains(github.event_name, 'push')
        working-directory: resource
        run: yarn cdk:deploy
        env:
          AWS_DEFAULT_REGION: 'ap-northeast-1'
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  build-and-push:
    runs-on: ubuntu-latest
    needs:
      - aws_cdk  
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Build, tag, and push docker image to Amazon ECR
        working-directory: admin
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG