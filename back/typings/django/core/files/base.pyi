"""
This type stub file was generated by pyright.
"""

from django.core.files.utils import FileProxyMixin
from django.utils.functional import cached_property

class File(FileProxyMixin):
    DEFAULT_CHUNK_SIZE = ...
    def __init__(self, file, name=...) -> None:
        ...
    
    def __str__(self) -> str:
        ...
    
    def __repr__(self): # -> str:
        ...
    
    def __bool__(self): # -> bool:
        ...
    
    def __len__(self): # -> cached_property:
        ...
    
    @cached_property
    def size(self): # -> int:
        ...
    
    def chunks(self, chunk_size=...): # -> Generator[Any, None, None]:
        """
        Read the file and yield chunks of ``chunk_size`` bytes (defaults to
        ``File.DEFAULT_CHUNK_SIZE``).
        """
        ...
    
    def multiple_chunks(self, chunk_size=...):
        """
        Return ``True`` if you can expect multiple chunks.

        NB: If a particular file representation is in memory, subclasses should
        always return ``False`` -- there's no good reason to read from memory in
        chunks.
        """
        ...
    
    def __iter__(self): # -> Generator[Any, None, None]:
        ...
    
    def __enter__(self): # -> Self@File:
        ...
    
    def __exit__(self, exc_type, exc_value, tb): # -> None:
        ...
    
    def open(self, mode=...): # -> Self@File:
        ...
    
    def close(self): # -> None:
        ...
    


class ContentFile(File):
    """
    A File-like object that takes just raw content, rather than an actual file.
    """
    def __init__(self, content, name=...) -> None:
        ...
    
    def __str__(self) -> str:
        ...
    
    def __bool__(self): # -> Literal[True]:
        ...
    
    def open(self, mode=...): # -> Self@ContentFile:
        ...
    
    def close(self): # -> None:
        ...
    
    def write(self, data):
        ...
    


def endswith_cr(line):
    """Return True if line (a text or bytestring) ends with '\r'."""
    ...

def endswith_lf(line):
    """Return True if line (a text or bytestring) ends with '\n'."""
    ...

def equals_lf(line):
    """Return True if line (a text or bytestring) equals '\n'."""
    ...

