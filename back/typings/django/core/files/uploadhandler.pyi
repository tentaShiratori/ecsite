"""
This type stub file was generated by pyright.
"""

"""
Base file upload handler classes, and the built-in concrete subclasses
"""
__all__ = ["UploadFileException", "StopUpload", "SkipFile", "FileUploadHandler", "TemporaryFileUploadHandler", "MemoryFileUploadHandler", "load_handler", "StopFutureHandlers"]
class UploadFileException(Exception):
    """
    Any error having to do with uploading files.
    """
    ...


class StopUpload(UploadFileException):
    """
    This exception is raised when an upload must abort.
    """
    def __init__(self, connection_reset=...) -> None:
        """
        If ``connection_reset`` is ``True``, Django knows will halt the upload
        without consuming the rest of the upload. This will cause the browser to
        show a "connection reset" error.
        """
        ...
    
    def __str__(self) -> str:
        ...
    


class SkipFile(UploadFileException):
    """
    This exception is raised by an upload handler that wants to skip a given file.
    """
    ...


class StopFutureHandlers(UploadFileException):
    """
    Upload handlers that have handled a file and do not want future handlers to
    run should raise this exception instead of returning None.
    """
    ...


class FileUploadHandler:
    """
    Base class for streaming upload handlers.
    """
    chunk_size = ...
    def __init__(self, request=...) -> None:
        ...
    
    def handle_raw_input(self, input_data, META, content_length, boundary, encoding=...): # -> None:
        """
        Handle the raw input from the client.

        Parameters:

            :input_data:
                An object that supports reading via .read().
            :META:
                ``request.META``.
            :content_length:
                The (integer) value of the Content-Length header from the
                client.
            :boundary: The boundary from the Content-Type header. Be sure to
                prepend two '--'.
        """
        ...
    
    def new_file(self, field_name, file_name, content_type, content_length, charset=..., content_type_extra=...): # -> None:
        """
        Signal that a new file has been started.

        Warning: As with any data from the client, you should not trust
        content_length (and sometimes won't even get it).
        """
        ...
    
    def receive_data_chunk(self, raw_data, start):
        """
        Receive data from the streamed upload parser. ``start`` is the position
        in the file of the chunk.
        """
        ...
    
    def file_complete(self, file_size):
        """
        Signal that a file has completed. File size corresponds to the actual
        size accumulated by all the chunks.

        Subclasses should return a valid ``UploadedFile`` object.
        """
        ...
    
    def upload_complete(self): # -> None:
        """
        Signal that the upload is complete. Subclasses should perform cleanup
        that is necessary for this handler.
        """
        ...
    
    def upload_interrupted(self): # -> None:
        """
        Signal that the upload was interrupted. Subclasses should perform
        cleanup that is necessary for this handler.
        """
        ...
    


class TemporaryFileUploadHandler(FileUploadHandler):
    """
    Upload handler that streams data into a temporary file.
    """
    def new_file(self, *args, **kwargs): # -> None:
        """
        Create the file object to append to as data is coming in.
        """
        ...
    
    def receive_data_chunk(self, raw_data, start): # -> None:
        ...
    
    def file_complete(self, file_size): # -> TemporaryUploadedFile:
        ...
    
    def upload_interrupted(self): # -> None:
        ...
    


class MemoryFileUploadHandler(FileUploadHandler):
    """
    File upload handler to stream uploads into memory (used for small files).
    """
    def handle_raw_input(self, input_data, META, content_length, boundary, encoding=...): # -> None:
        """
        Use the content_length to signal whether or not this handler should be
        used.
        """
        ...
    
    def new_file(self, *args, **kwargs): # -> None:
        ...
    
    def receive_data_chunk(self, raw_data, start): # -> None:
        """Add the data to the BytesIO file."""
        ...
    
    def file_complete(self, file_size): # -> InMemoryUploadedFile | None:
        """Return a file object if this handler is activated."""
        ...
    


def load_handler(path, *args, **kwargs): # -> Any:
    """
    Given a path to a handler, return an instance of that handler.

    E.g.::
        >>> from django.http import HttpRequest
        >>> request = HttpRequest()
        >>> load_handler(
        ...     'django.core.files.uploadhandler.TemporaryFileUploadHandler',
        ...     request,
        ... )
        <TemporaryFileUploadHandler object at 0x...>
    """
    ...

