"""
This type stub file was generated by pyright.
"""

import os
from django.core.files.utils import FileProxyMixin

"""
The temp module provides a NamedTemporaryFile that can be reopened in the same
process on any platform. Most platforms use the standard Python
tempfile.NamedTemporaryFile class, but Windows users are given a custom class.

This is needed because the Python implementation of NamedTemporaryFile uses the
O_TEMPORARY flag under Windows, which prevents the file from being reopened
if the same flag is not provided [1][2]. Note that this does not address the
more general issue of opening a file for writing and reading in multiple
processes in a manner that works across platforms.

The custom version of NamedTemporaryFile doesn't support the same keyword
arguments available in tempfile.NamedTemporaryFile.

1: https://mail.python.org/pipermail/python-list/2005-December/336957.html
2: https://bugs.python.org/issue14243
"""
__all__ = ("NamedTemporaryFile", "gettempdir")
if os.name == "nt":
    class TemporaryFile(FileProxyMixin):
        """
        Temporary file object constructor that supports reopening of the
        temporary file in Windows.

        Unlike tempfile.NamedTemporaryFile from the standard library,
        __init__() doesn't support the 'delete', 'buffering', 'encoding', or
        'newline' keyword arguments.
        """
        def __init__(self, mode=..., bufsize=..., suffix=..., prefix=..., dir=...) -> None:
            ...
        
        unlink = ...
        def close(self): # -> None:
            ...
        
        def __del__(self): # -> None:
            ...
        
        def __enter__(self): # -> Self@TemporaryFile:
            ...
        
        def __exit__(self, exc, value, tb): # -> None:
            ...
        
    
    
    NamedTemporaryFile = TemporaryFile
else:
    ...
gettempdir = ...
