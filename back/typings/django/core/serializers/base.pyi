"""
This type stub file was generated by pyright.
"""

from io import StringIO

"""
Module for abstract serializer/unserializer base classes.
"""
DEFER_FIELD = ...
class PickleSerializer:
    """
    Simple wrapper around pickle to be used in signing.dumps()/loads() and
    cache backends.
    """
    def __init__(self, protocol=...) -> None:
        ...
    
    def dumps(self, obj): # -> bytes:
        ...
    
    def loads(self, data): # -> Any:
        ...
    


class SerializerDoesNotExist(KeyError):
    """The requested serializer was not found."""
    ...


class SerializationError(Exception):
    """Something bad happened during serialization."""
    ...


class DeserializationError(Exception):
    """Something bad happened during deserialization."""
    @classmethod
    def WithData(cls, original_exc, model, fk, field_value): # -> Self@DeserializationError:
        """
        Factory method for creating a deserialization error which has a more
        explanatory message.
        """
        ...
    


class M2MDeserializationError(Exception):
    """Something bad happened during deserialization of a ManyToManyField."""
    def __init__(self, original_exc, pk) -> None:
        ...
    


class ProgressBar:
    progress_width = ...
    def __init__(self, output, total_count) -> None:
        ...
    
    def update(self, count): # -> None:
        ...
    


class Serializer:
    """
    Abstract serializer base class.
    """
    internal_use_only = ...
    progress_class = ProgressBar
    stream_class = StringIO
    def serialize(self, queryset, *, stream=..., fields=..., use_natural_foreign_keys=..., use_natural_primary_keys=..., progress_output=..., object_count=..., **options): # -> str | None:
        """
        Serialize a queryset.
        """
        ...
    
    def start_serialization(self):
        """
        Called when serializing of the queryset starts.
        """
        ...
    
    def end_serialization(self): # -> None:
        """
        Called when serializing of the queryset ends.
        """
        ...
    
    def start_object(self, obj):
        """
        Called when serializing of an object starts.
        """
        ...
    
    def end_object(self, obj): # -> None:
        """
        Called when serializing of an object ends.
        """
        ...
    
    def handle_field(self, obj, field):
        """
        Called to handle each individual (non-relational) field on an object.
        """
        ...
    
    def handle_fk_field(self, obj, field):
        """
        Called to handle a ForeignKey field.
        """
        ...
    
    def handle_m2m_field(self, obj, field):
        """
        Called to handle a ManyToManyField.
        """
        ...
    
    def getvalue(self): # -> str | None:
        """
        Return the fully serialized queryset (or None if the output stream is
        not seekable).
        """
        ...
    


class Deserializer:
    """
    Abstract base deserializer class.
    """
    def __init__(self, stream_or_string, **options) -> None:
        """
        Init this serializer given a stream or a string
        """
        ...
    
    def __iter__(self): # -> Self@Deserializer:
        ...
    
    def __next__(self):
        """Iteration interface -- return the next item in the stream"""
        ...
    


class DeserializedObject:
    """
    A deserialized model.

    Basically a container for holding the pre-saved deserialized data along
    with the many-to-many data saved with the object.

    Call ``save()`` to save the object (with the many-to-many data) to the
    database; call ``save(save_m2m=False)`` to save just the object fields
    (and not touch the many-to-many stuff.)
    """
    def __init__(self, obj, m2m_data=..., deferred_fields=...) -> None:
        ...
    
    def __repr__(self): # -> str:
        ...
    
    def save(self, save_m2m=..., using=..., **kwargs): # -> None:
        ...
    
    def save_deferred_fields(self, using=...): # -> None:
        ...
    


def build_instance(Model, data, db):
    """
    Build a model instance.

    If the model instance doesn't have a primary key and the model supports
    natural keys, try to retrieve it from the database.
    """
    ...

def deserialize_m2m_values(field, field_value, using, handle_forward_references): # -> list[Unknown] | object:
    ...

def deserialize_fk_value(field, field_value, using, handle_forward_references): # -> object | Any | None:
    ...

