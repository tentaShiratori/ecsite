"""
This type stub file was generated by pyright.
"""

import importlib
from django.apps import apps
from django.conf import settings
from django.core.serializers.base import SerializerDoesNotExist

"""
Interfaces for serializing Django objects.

Usage::

    from django.core import serializers
    json = serializers.serialize("json", some_queryset)
    objects = list(serializers.deserialize("json", json))

To add your own serializers, use the SERIALIZATION_MODULES setting::

    SERIALIZATION_MODULES = {
        "csv": "path.to.csv.serializer",
        "txt": "path.to.txt.serializer",
    }

"""
BUILTIN_SERIALIZERS = ...
_serializers = ...
class BadSerializer:
    """
    Stub serializer to hold exception raised during registration

    This allows the serializer registration to cache serializers and if there
    is an error raised in the process of creating a serializer it will be
    raised and passed along to the caller when the serializer is used.
    """
    internal_use_only = ...
    def __init__(self, exception) -> None:
        ...
    
    def __call__(self, *args, **kwargs):
        ...
    


def register_serializer(format, serializer_module, serializers=...): # -> None:
    """Register a new serializer.

    ``serializer_module`` should be the fully qualified module name
    for the serializer.

    If ``serializers`` is provided, the registration will be added
    to the provided dictionary.

    If ``serializers`` is not provided, the registration will be made
    directly into the global register of serializers. Adding serializers
    directly is not a thread-safe operation.
    """
    ...

def unregister_serializer(format): # -> None:
    "Unregister a given serializer. This is not a thread-safe operation."
    ...

def get_serializer(format):
    ...

def get_serializer_formats(): # -> list[Unknown]:
    ...

def get_public_serializer_formats(): # -> list[Unknown]:
    ...

def get_deserializer(format):
    ...

def serialize(format, queryset, **options):
    """
    Serialize a queryset (or any iterator that returns database objects) using
    a certain serializer.
    """
    ...

def deserialize(format, stream_or_string, **options):
    """
    Deserialize a stream or a string. Return an iterator that yields ``(obj,
    m2m_relation_dict)``, where ``obj`` is an instantiated -- but *unsaved* --
    object, and ``m2m_relation_dict`` is a dictionary of ``{m2m_field_name :
    list_of_related_objects}``.
    """
    ...

def sort_dependencies(app_list, allow_cycles=...): # -> list[Unknown]:
    """Sort a list of (app_config, models) pairs into a single list of models.

    The single list of models is sorted so that any model with a natural key
    is serialized before a normal model, and any model with a natural key
    dependency has it's dependencies serialized first.

    If allow_cycles is True, return the best-effort ordering that will respect
    most of dependencies but ignore some of them to break the cycles.
    """
    ...

