"""
This type stub file was generated by pyright.
"""

from django.forms import Form
from django.forms.utils import RenderableFormMixin
from django.forms.widgets import CheckboxInput, NumberInput
from django.utils.functional import cached_property

__all__ = ("BaseFormSet", "formset_factory", "all_valid")
TOTAL_FORM_COUNT = ...
INITIAL_FORM_COUNT = ...
MIN_NUM_FORM_COUNT = ...
MAX_NUM_FORM_COUNT = ...
ORDERING_FIELD_NAME = ...
DELETION_FIELD_NAME = ...
DEFAULT_MIN_NUM = ...
DEFAULT_MAX_NUM = ...
class ManagementForm(Form):
    """
    Keep track of how many form instances are displayed on the page. If adding
    new forms via JavaScript, you should increment the count field of this form
    as well.
    """
    template_name = ...
    TOTAL_FORMS = ...
    INITIAL_FORMS = ...
    MIN_NUM_FORMS = ...
    MAX_NUM_FORMS = ...
    def clean(self): # -> dict[Unknown, Unknown]:
        ...
    


class BaseFormSet(RenderableFormMixin):
    """
    A collection of instances of the same Form class.
    """
    deletion_widget = CheckboxInput
    ordering_widget = NumberInput
    default_error_messages = ...
    template_name_div = ...
    template_name_p = ...
    template_name_table = ...
    template_name_ul = ...
    def __init__(self, data=..., files=..., auto_id=..., prefix=..., initial=..., error_class=..., form_kwargs=..., error_messages=...) -> None:
        ...
    
    def __iter__(self):
        """Yield the forms in the order they should be rendered."""
        ...
    
    def __getitem__(self, index):
        """Return the form at the given index, based on the rendering order."""
        ...
    
    def __len__(self): # -> int:
        ...
    
    def __bool__(self): # -> Literal[True]:
        """
        Return True since all formsets have a management form which is not
        included in the length.
        """
        ...
    
    def __repr__(self): # -> str:
        ...
    
    @cached_property
    def management_form(self): # -> ManagementForm:
        """Return the ManagementForm instance for this FormSet."""
        ...
    
    def total_form_count(self): # -> int:
        """Return the total number of forms in this FormSet."""
        ...
    
    def initial_form_count(self): # -> int:
        """Return the number of forms that are required in this FormSet."""
        ...
    
    @cached_property
    def forms(self): # -> list[Unknown]:
        """Instantiate forms at first property access."""
        ...
    
    def get_form_kwargs(self, index): # -> dict[Any, Any]:
        """
        Return additional keyword arguments for each individual formset form.

        index will be None if the form being constructed is a new empty
        form.
        """
        ...
    
    @property
    def initial_forms(self):
        """Return a list of all the initial forms in this formset."""
        ...
    
    @property
    def extra_forms(self):
        """Return a list of all the extra forms in this formset."""
        ...
    
    @property
    def empty_form(self):
        ...
    
    @property
    def cleaned_data(self): # -> list[Unknown]:
        """
        Return a list of form.cleaned_data dicts for every form in self.forms.
        """
        ...
    
    @property
    def deleted_forms(self): # -> list[Unknown]:
        """Return a list of forms that have been marked for deletion."""
        ...
    
    @property
    def ordered_forms(self): # -> list[Unknown]:
        """
        Return a list of form in the order specified by the incoming data.
        Raise an AttributeError if ordering is not allowed.
        """
        ...
    
    @classmethod
    def get_default_prefix(cls): # -> Literal['form']:
        ...
    
    @classmethod
    def get_deletion_widget(cls): # -> deletion_widget:
        ...
    
    @classmethod
    def get_ordering_widget(cls): # -> ordering_widget:
        ...
    
    def non_form_errors(self): # -> ErrorList | None:
        """
        Return an ErrorList of errors that aren't associated with a particular
        form -- i.e., from formset.clean(). Return an empty ErrorList if there
        are none.
        """
        ...
    
    @property
    def errors(self): # -> list[Unknown] | None:
        """Return a list of form.errors for every form in self.forms."""
        ...
    
    def total_error_count(self): # -> int:
        """Return the number of errors across all forms in the formset."""
        ...
    
    def is_valid(self): # -> bool:
        """Return True if every form in self.forms is valid."""
        ...
    
    def full_clean(self): # -> None:
        """
        Clean all of self.data and populate self._errors and
        self._non_form_errors.
        """
        ...
    
    def clean(self): # -> None:
        """
        Hook for doing any extra formset-wide cleaning after Form.clean() has
        been called on every form. Any ValidationError raised by this method
        will not be associated with a particular form; it will be accessible
        via formset.non_form_errors()
        """
        ...
    
    def has_changed(self): # -> bool:
        """Return True if data in any form differs from initial."""
        ...
    
    def add_fields(self, form, index): # -> None:
        """A hook for adding extra fields on to each form instance."""
        ...
    
    def add_prefix(self, index): # -> str:
        ...
    
    def is_multipart(self):
        """
        Return True if the formset needs to be multipart, i.e. it
        has FileInput, or False otherwise.
        """
        ...
    
    @property
    def media(self):
        ...
    
    @property
    def template_name(self):
        ...
    
    def get_context(self): # -> dict[str, Self@BaseFormSet]:
        ...
    


def formset_factory(form, formset=..., extra=..., can_order=..., can_delete=..., max_num=..., validate_max=..., min_num=..., validate_min=..., absolute_max=..., can_delete_extra=..., renderer=...): # -> Any:
    """Return a FormSet for the given form class."""
    ...

def all_valid(formsets): # -> bool:
    """Validate every formset and return True if all are valid."""
    ...

