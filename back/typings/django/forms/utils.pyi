"""
This type stub file was generated by pyright.
"""

from collections import UserList

def pretty_name(name): # -> Literal['']:
    """Convert 'first_name' to 'First name'."""
    ...

def flatatt(attrs):
    """
    Convert a dictionary of attributes to a single string.
    The returned string will contain a leading space followed by key="value",
    XML-style pairs. In the case of a boolean value, the key will appear
    without a value. It is assumed that the keys do not need to be
    XML-escaped. If the passed dictionary is empty, then return an empty
    string.

    The result is passed through 'mark_safe' (by way of 'format_html_join').
    """
    ...

DEFAULT_TEMPLATE_DEPRECATION_MSG = ...
class RenderableMixin:
    def get_context(self):
        ...
    
    def render(self, template_name=..., context=..., renderer=...): # -> _Wrapped[(...), Unknown, (*args: Unknown, **kwargs: Unknown), Unknown] | SafeString:
        ...
    
    __str__ = ...
    __html__ = ...


class RenderableFormMixin(RenderableMixin):
    def as_p(self): # -> _Wrapped[(...), Unknown, (*args: Unknown, **kwargs: Unknown), Unknown] | SafeString:
        """Render as <p> elements."""
        ...
    
    def as_table(self): # -> _Wrapped[(...), Unknown, (*args: Unknown, **kwargs: Unknown), Unknown] | SafeString:
        """Render as <tr> elements excluding the surrounding <table> tag."""
        ...
    
    def as_ul(self): # -> _Wrapped[(...), Unknown, (*args: Unknown, **kwargs: Unknown), Unknown] | SafeString:
        """Render as <li> elements excluding the surrounding <ul> tag."""
        ...
    
    def as_div(self): # -> _Wrapped[(...), Unknown, (*args: Unknown, **kwargs: Unknown), Unknown] | SafeString:
        """Render as <div> elements."""
        ...
    


class RenderableErrorMixin(RenderableMixin):
    def as_json(self, escape_html=...): # -> str:
        ...
    
    def as_text(self): # -> _Wrapped[(...), Unknown, (*args: Unknown, **kwargs: Unknown), Unknown] | SafeString:
        ...
    
    def as_ul(self): # -> _Wrapped[(...), Unknown, (*args: Unknown, **kwargs: Unknown), Unknown] | SafeString:
        ...
    


class ErrorDict(dict, RenderableErrorMixin):
    """
    A collection of errors that knows how to display itself in various formats.

    The dictionary keys are the field names, and the values are the errors.
    """
    template_name = ...
    template_name_text = ...
    template_name_ul = ...
    def __init__(self, *args, renderer=..., **kwargs) -> None:
        ...
    
    def as_data(self): # -> dict[Unknown, Unknown]:
        ...
    
    def get_json_data(self, escape_html=...): # -> dict[Unknown, Unknown]:
        ...
    
    def get_context(self): # -> dict[str, Unknown]:
        ...
    


class ErrorList(UserList, list, RenderableErrorMixin):
    """
    A collection of errors that knows how to display itself in various formats.
    """
    template_name = ...
    template_name_text = ...
    template_name_ul = ...
    def __init__(self, initlist=..., error_class=..., renderer=...) -> None:
        ...
    
    def as_data(self): # -> list[ValidationError]:
        ...
    
    def copy(self): # -> Self@ErrorList:
        ...
    
    def get_json_data(self, escape_html=...): # -> list[Unknown]:
        ...
    
    def get_context(self): # -> dict[str, Unknown]:
        ...
    
    def __repr__(self): # -> str:
        ...
    
    def __contains__(self, item): # -> bool:
        ...
    
    def __eq__(self, other) -> bool:
        ...
    
    def __getitem__(self, i): # -> tuple[Unknown, list[Unknown]] | str:
        ...
    
    def __reduce_ex__(self, *args, **kwargs):
        ...
    


def from_current_timezone(value): # -> Any | datetime:
    """
    When time zone support is enabled, convert naive datetimes
    entered in the current time zone to aware datetimes.
    """
    ...

def to_current_timezone(value):
    """
    When time zone support is enabled, convert aware datetimes
    to naive datetimes in the current time zone for display.
    """
    ...

