"""
This type stub file was generated by pyright.
"""

"""
A class for storing a tree graph. Primarily used for filter constructs in the
ORM.
"""
class Node:
    """
    A single internal node in the tree graph. A Node should be viewed as a
    connection (the root) with the children being either leaf nodes or other
    Node instances.
    """
    default = ...
    def __init__(self, children=..., connector=..., negated=...) -> None:
        """Construct a new Node. If no connector is given, use the default."""
        ...
    
    def __str__(self) -> str:
        ...
    
    def __repr__(self): # -> str:
        ...
    
    def __deepcopy__(self, memodict): # -> Node:
        ...
    
    def __len__(self): # -> int:
        """Return the number of children this node has."""
        ...
    
    def __bool__(self): # -> bool:
        """Return whether or not this node has children."""
        ...
    
    def __contains__(self, other): # -> bool:
        """Return True if 'other' is a direct child of this instance."""
        ...
    
    def __eq__(self, other) -> bool:
        ...
    
    def __hash__(self) -> int:
        ...
    
    def add(self, data, conn_type): # -> Self@Node | Node:
        """
        Combine this tree and the data represented by data using the
        connector conn_type. The combine is done by squashing the node other
        away if possible.

        This tree (self) will never be pushed to a child node of the
        combined tree, nor will the connector or negated properties change.

        Return a node which can be used in place of data regardless if the
        node other got squashed or not.
        """
        ...
    
    def negate(self): # -> None:
        """Negate the sense of the root connector."""
        ...
    


