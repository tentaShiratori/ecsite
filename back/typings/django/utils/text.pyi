"""
This type stub file was generated by pyright.
"""

from io import BytesIO
from django.utils.functional import SimpleLazyObject, keep_lazy_text

@keep_lazy_text
def capfirst(x): # -> str:
    """Capitalize the first letter of a string."""
    ...

re_words = ...
re_chars = ...
re_tag = ...
re_newlines = ...
re_camel_case = ...
@keep_lazy_text
def wrap(text, width): # -> LiteralString:
    """
    A word-wrap function that preserves existing line breaks. Expects that
    existing line breaks are posix newlines.

    Preserve all white space except added line breaks consume the space on
    which they break the line.

    Don't wrap long words, thus the output text may have lines longer than
    ``width``.
    """
    ...

class Truncator(SimpleLazyObject):
    """
    An object used to truncate text, either by characters or words.
    """
    def __init__(self, text) -> None:
        ...
    
    def add_truncation_text(self, text, truncate=...): # -> Any | LiteralString:
        ...
    
    def chars(self, num, truncate=..., html=...): # -> Any | LiteralString | str:
        """
        Return the text truncated to be no longer than the specified number
        of characters.

        `truncate` specifies what should be used to notify that the string has
        been truncated, defaulting to a translatable string of an ellipsis.
        """
        ...
    
    def words(self, num, truncate=..., html=...): # -> Any | str:
        """
        Truncate a string after a certain number of words. `truncate` specifies
        what should be used to notify that the string has been truncated,
        defaulting to ellipsis.
        """
        ...
    


@keep_lazy_text
def get_valid_filename(name): # -> str:
    """
    Return the given string converted to a string that can be used for a clean
    filename. Remove leading and trailing spaces; convert other spaces to
    underscores; and remove anything that is not an alphanumeric, dash,
    underscore, or dot.
    >>> get_valid_filename("john's portrait in 2004.jpg")
    'johns_portrait_in_2004.jpg'
    """
    ...

@keep_lazy_text
def get_text_list(list_, last_word=...): # -> str:
    """
    >>> get_text_list(['a', 'b', 'c', 'd'])
    'a, b, c or d'
    >>> get_text_list(['a', 'b', 'c'], 'and')
    'a, b and c'
    >>> get_text_list(['a', 'b'], 'and')
    'a and b'
    >>> get_text_list(['a'])
    'a'
    >>> get_text_list([])
    ''
    """
    ...

@keep_lazy_text
def normalize_newlines(text): # -> Any:
    """Normalize CRLF and CR newlines to just LF."""
    ...

@keep_lazy_text
def phone2numeric(phone): # -> str:
    """Convert a phone number with letters into its numeric equivalent."""
    ...

def compress_string(s): # -> bytes:
    ...

class StreamingBuffer(BytesIO):
    def read(self): # -> bytes:
        ...
    


def compress_sequence(sequence): # -> Generator[bytes, None, None]:
    ...

smart_split_re = ...
def smart_split(text): # -> Generator[Any, None, None]:
    r"""
    Generator that splits a string by spaces, leaving quoted phrases together.
    Supports both single and double quotes, and supports escaping quotes with
    backslashes. In the output, strings will keep their initial and trailing
    quote marks and escaped quotes will remain escaped (the results can then
    be further processed with unescape_string_literal()).

    >>> list(smart_split(r'This is "a person\'s" test.'))
    ['This', 'is', '"a person\\\'s"', 'test.']
    >>> list(smart_split(r"Another 'person\'s' test."))
    ['Another', "'person\\'s'", 'test.']
    >>> list(smart_split(r'A "\"funky\" style" test.'))
    ['A', '"\\"funky\\" style"', 'test.']
    """
    ...

@keep_lazy_text
def unescape_string_literal(s):
    r"""
    Convert quoted string literals to unquoted strings with escaped quotes and
    backslashes unquoted::

        >>> unescape_string_literal('"abc"')
        'abc'
        >>> unescape_string_literal("'abc'")
        'abc'
        >>> unescape_string_literal('"a \"bc\""')
        'a "bc"'
        >>> unescape_string_literal("'\'ab\' c'")
        "'ab' c"
    """
    ...

@keep_lazy_text
def slugify(value, allow_unicode=...): # -> str:
    """
    Convert to ASCII if 'allow_unicode' is False. Convert spaces or repeated
    dashes to single dashes. Remove characters that aren't alphanumerics,
    underscores, or hyphens. Convert to lowercase. Also strip leading and
    trailing whitespace, dashes, and underscores.
    """
    ...

def camel_case_to_spaces(value): # -> Any:
    """
    Split CamelCase and convert to lowercase. Strip surrounding whitespace.
    """
    ...

format_lazy = ...
