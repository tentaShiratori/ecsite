"""
This type stub file was generated by pyright.
"""

"Functions that help with dynamically creating decorators for views."
class classonlymethod(classmethod):
    def __get__(self, instance, cls=...): # -> (...) -> Unknown:
        ...
    


def method_decorator(decorator, name=...): # -> (obj: Unknown) -> (((self: Unknown, *args: Unknown, **kwargs: Unknown) -> Unknown) | type):
    """
    Convert a function decorator into a method decorator
    """
    ...

def decorator_from_middleware_with_args(middleware_class): # -> (*m_args: Unknown, **m_kwargs: Unknown) -> ((view_func: Unknown) -> _Wrapped[(...), Unknown, (request: Unknown, *args: Unknown, **kwargs: Unknown), Unknown]):
    """
    Like decorator_from_middleware, but return a function
    that accepts the arguments to be passed to the middleware_class.
    Use like::

         cache_page = decorator_from_middleware_with_args(CacheMiddleware)
         # ...

         @cache_page(3600)
         def my_view(request):
             # ...
    """
    ...

def decorator_from_middleware(middleware_class): # -> (view_func: Unknown) -> _Wrapped[(...), Unknown, (request: Unknown, *args: Unknown, **kwargs: Unknown), Unknown]:
    """
    Given a middleware class (not an instance), return a view decorator. This
    lets you use middleware functionality on a per-view basis. The middleware
    is created with no params passed.
    """
    ...

def make_middleware_decorator(middleware_class): # -> (*m_args: Unknown, **m_kwargs: Unknown) -> ((view_func: Unknown) -> _Wrapped[(...), Unknown, (request: Unknown, *args: Unknown, **kwargs: Unknown), Unknown]):
    ...

def sync_and_async_middleware(func):
    """
    Mark a middleware factory as returning a hybrid middleware supporting both
    types of request.
    """
    ...

def sync_only_middleware(func):
    """
    Mark a middleware factory as returning a sync middleware.
    This is the default.
    """
    ...

def async_only_middleware(func):
    """Mark a middleware factory as returning an async middleware."""
    ...

