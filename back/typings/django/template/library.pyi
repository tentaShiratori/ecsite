"""
This type stub file was generated by pyright.
"""

from .base import Node

class InvalidTemplateLibrary(Exception):
    ...


class Library:
    """
    A class for registering template tags and filters. Compiled filter and
    template tag functions are stored in the filters and tags attributes.
    The filter, simple_tag, and inclusion_tag methods provide a convenient
    way to register callables as tags.
    """
    def __init__(self) -> None:
        ...
    
    def tag(self, name=..., compile_function=...): # -> ((func: Unknown) -> Unknown) | ((func: Unknown) -> (((func: Unknown) -> Unknown) | Unknown | ...)):
        ...
    
    def tag_function(self, func):
        ...
    
    def filter(self, name=..., filter_func=..., **flags): # -> (func: Unknown) -> Unknown:
        """
        Register a callable as a template filter. Example:

        @register.filter
        def lower(value):
            return value.lower()
        """
        ...
    
    def filter_function(self, func, **flags):
        ...
    
    def simple_tag(self, func=..., takes_context=..., name=...): # -> (func: Unknown) -> Unknown:
        """
        Register a callable as a compiled template tag. Example:

        @register.simple_tag
        def hello(*args, **kwargs):
            return 'world'
        """
        ...
    
    def inclusion_tag(self, filename, func=..., takes_context=..., name=...): # -> (func: Unknown) -> Unknown:
        """
        Register a callable as an inclusion tag:

        @register.inclusion_tag('results.html')
        def show_results(poll):
            choices = poll.choice_set.all()
            return {'choices': choices}
        """
        ...
    


class TagHelperNode(Node):
    """
    Base class for tag helper nodes such as SimpleNode and InclusionNode.
    Manages the positional and keyword arguments to be passed to the decorated
    function.
    """
    def __init__(self, func, takes_context, args, kwargs) -> None:
        ...
    
    def get_resolved_arguments(self, context): # -> tuple[list[Unknown], dict[Unknown, Unknown]]:
        ...
    


class SimpleNode(TagHelperNode):
    child_nodelists = ...
    def __init__(self, func, takes_context, args, kwargs, target_var) -> None:
        ...
    
    def render(self, context): # -> SafeString | Literal['']:
        ...
    


class InclusionNode(TagHelperNode):
    def __init__(self, func, takes_context, args, kwargs, filename) -> None:
        ...
    
    def render(self, context): # -> SafeString:
        """
        Render the specified template and context. Cache the template object
        in render_context to avoid reparsing and loading when used in a for
        loop.
        """
        ...
    


def parse_bits(parser, bits, params, varargs, varkw, defaults, kwonly, kwonly_defaults, takes_context, name): # -> tuple[list[Unknown], dict[Unknown, Unknown]]:
    """
    Parse bits for template tag helpers simple_tag and inclusion_tag, in
    particular by detecting syntax errors and by extracting positional and
    keyword arguments.
    """
    ...

def import_library(name): # -> Any:
    """
    Load a Library object from a template tag module.
    """
    ...

