"""
This type stub file was generated by pyright.
"""

import functools
from django.utils.functional import cached_property

class Engine:
    default_builtins = ...
    def __init__(self, dirs=..., app_dirs=..., context_processors=..., debug=..., loaders=..., string_if_invalid=..., file_charset=..., libraries=..., builtins=..., autoescape=...) -> None:
        ...
    
    def __repr__(self): # -> str:
        ...
    
    @staticmethod
    @functools.lru_cache
    def get_default(): # -> Engine:
        """
        Return the first DjangoTemplates backend that's configured, or raise
        ImproperlyConfigured if none are configured.

        This is required for preserving historical APIs that rely on a
        globally available, implicitly configured engine such as:

        >>> from django.template import Context, Template
        >>> template = Template("Hello {{ name }}!")
        >>> context = Context({'name': "world"})
        >>> template.render(context)
        'Hello world!'
        """
        ...
    
    @cached_property
    def template_context_processors(self): # -> tuple[Any, ...]:
        ...
    
    def get_template_builtins(self, builtins): # -> list[Any]:
        ...
    
    def get_template_libraries(self, libraries): # -> dict[Unknown, Unknown]:
        ...
    
    @cached_property
    def template_loaders(self): # -> list[Unknown]:
        ...
    
    def get_template_loaders(self, template_loaders): # -> list[Unknown]:
        ...
    
    def find_template_loader(self, loader): # -> Any:
        ...
    
    def find_template(self, name, dirs=..., skip=...): # -> tuple[Unknown, Unknown]:
        ...
    
    def from_string(self, template_code): # -> Template:
        """
        Return a compiled Template object for the given template code,
        handling template inheritance recursively.
        """
        ...
    
    def get_template(self, template_name): # -> Template:
        """
        Return a compiled Template object for the given template name,
        handling template inheritance recursively.
        """
        ...
    
    def render_to_string(self, template_name, context=...): # -> SafeString:
        """
        Render the template specified by template_name with the given context.
        For use in Django's test suite.
        """
        ...
    
    def select_template(self, template_name_list): # -> Template:
        """
        Given a list of template names, return the first that can be loaded.
        """
        ...
    


