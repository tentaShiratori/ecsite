"""
This type stub file was generated by pyright.
"""

from .base import BaseEngine

class DjangoTemplates(BaseEngine):
    app_dirname = ...
    def __init__(self, params) -> None:
        ...
    
    def from_string(self, template_code): # -> Template:
        ...
    
    def get_template(self, template_name): # -> Template | None:
        ...
    
    def get_templatetag_libraries(self, custom_libraries): # -> dict[str, str]:
        """
        Return a collation of template tag libraries from installed
        applications and the supplied custom_libraries argument.
        """
        ...
    


class Template:
    def __init__(self, template, backend) -> None:
        ...
    
    @property
    def origin(self):
        ...
    
    def render(self, context=..., request=...): # -> None:
        ...
    


def copy_exception(exc, backend=...):
    """
    Create a new TemplateDoesNotExist. Preserve its declared attributes and
    template debug data but discard __traceback__, __context__, and __cause__
    to make this object suitable for keeping around (in a cache, for example).
    """
    ...

def reraise(exc, backend):
    """
    Reraise TemplateDoesNotExist while maintaining template debug information.
    """
    ...

def get_template_tag_modules(): # -> Generator[tuple[str, str], None, None]:
    """
    Yield (module_name, module_path) pairs for all installed template tag
    libraries.
    """
    ...

def get_installed_libraries(): # -> dict[str, str]:
    """
    Return the built-in template tag libraries and those from installed
    applications. Libraries are stored in a dictionary where keys are the
    individual module names, not the full module paths. Example:
    django.templatetags.i18n is stored as i18n.
    """
    ...

def get_package_libraries(pkg): # -> Generator[str, None, None]:
    """
    Recursively yield template tag libraries defined in submodules of a
    package.
    """
    ...

