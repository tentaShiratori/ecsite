"""
This type stub file was generated by pyright.
"""

from django.utils.connection import BaseConnectionHandler
from django.utils.functional import cached_property

DEFAULT_DB_ALIAS = ...
DJANGO_VERSION_PICKLE_KEY = ...
class Error(Exception):
    ...


class InterfaceError(Error):
    ...


class DatabaseError(Error):
    ...


class DataError(DatabaseError):
    ...


class OperationalError(DatabaseError):
    ...


class IntegrityError(DatabaseError):
    ...


class InternalError(DatabaseError):
    ...


class ProgrammingError(DatabaseError):
    ...


class NotSupportedError(DatabaseError):
    ...


class DatabaseErrorWrapper:
    """
    Context manager and decorator that reraises backend-specific database
    exceptions using Django's common wrappers.
    """
    def __init__(self, wrapper) -> None:
        """
        wrapper is a database wrapper.

        It must have a Database attribute defining PEP-249 exceptions.
        """
        ...
    
    def __enter__(self): # -> None:
        ...
    
    def __exit__(self, exc_type, exc_value, traceback): # -> None:
        ...
    
    def __call__(self, func): # -> (*args: Unknown, **kwargs: Unknown) -> Unknown:
        ...
    


def load_backend(backend_name): # -> ModuleType:
    """
    Return a database backend's "base" module given a fully qualified database
    backend name, or raise an error if it doesn't exist.
    """
    ...

class ConnectionHandler(BaseConnectionHandler):
    settings_name = ...
    thread_critical = ...
    def configure_settings(self, databases): # -> Any:
        ...
    
    @property
    def databases(self): # -> cached_property:
        ...
    
    def create_connection(self, alias): # -> Any:
        ...
    


class ConnectionRouter:
    def __init__(self, routers=...) -> None:
        """
        If routers is not specified, default to settings.DATABASE_ROUTERS.
        """
        ...
    
    @cached_property
    def routers(self): # -> list[Unknown]:
        ...
    
    db_for_read = ...
    db_for_write = ...
    def allow_relation(self, obj1, obj2, **hints):
        ...
    
    def allow_migrate(self, db, app_label, **hints): # -> Literal[True]:
        ...
    
    def allow_migrate_model(self, db, model): # -> Literal[True]:
        ...
    
    def get_migratable_models(self, app_config, db, include_auto_created=...): # -> list[Unknown]:
        """Return app models allowed to be migrated on provided db."""
        ...
    


