"""
This type stub file was generated by pyright.
"""

import functools
from django.utils import tree

"""
Various data structures used in query construction.

Factored out from django.db.models.query to avoid making the main module very
large and/or so that they can be used by other modules without getting into
circular import difficulties.
"""
logger = ...
PathInfo = ...
def subclasses(cls): # -> Generator[Unknown, None, None]:
    ...

class Q(tree.Node):
    """
    Encapsulate filters as objects that can then be combined logically (using
    `&` and `|`).
    """
    AND = ...
    OR = ...
    XOR = ...
    default = ...
    conditional = ...
    def __init__(self, *args, _connector=..., _negated=..., **kwargs) -> None:
        ...
    
    def __or__(self, other): # -> Q | Self@Q:
        ...
    
    def __and__(self, other): # -> Q | Self@Q:
        ...
    
    def __xor__(self, other): # -> Q | Self@Q:
        ...
    
    def __invert__(self): # -> Self@Q:
        ...
    
    def resolve_expression(self, query=..., allow_joins=..., reuse=..., summarize=..., for_save=...):
        ...
    
    def flatten(self): # -> Generator[Self@Q | Unknown, None, None]:
        """
        Recursively yield this Q object and all subexpressions, in depth-first
        order.
        """
        ...
    
    def check(self, against, using=...): # -> bool:
        """
        Do a database query to check if the expressions of the Q instance
        matches against the expressions.
        """
        ...
    
    def deconstruct(self): # -> tuple[str, tuple[Unknown, ...], dict[Unknown, Unknown]]:
        ...
    


class DeferredAttribute:
    """
    A wrapper for a deferred-loading field. When the value is read from this
    object the first time, the query is executed.
    """
    def __init__(self, field) -> None:
        ...
    
    def __get__(self, instance, cls=...): # -> Self@DeferredAttribute:
        """
        Retrieve and caches the value from the datastore on the first lookup.
        Return the cached value.
        """
        ...
    


class RegisterLookupMixin:
    @classmethod
    @functools.lru_cache(maxsize=None)
    def get_lookups(cls): # -> dict[Unknown, Unknown]:
        ...
    
    def get_lookup(self, lookup_name): # -> Type[Lookup] | None:
        ...
    
    def get_transform(self, lookup_name): # -> Type[Transform] | None:
        ...
    
    @staticmethod
    def merge_dicts(dicts): # -> dict[Unknown, Unknown]:
        """
        Merge dicts in reverse to preference the order of the original list. e.g.,
        merge_dicts([a, b]) will preference the keys in 'a' over those in 'b'.
        """
        ...
    
    @classmethod
    def register_lookup(cls, lookup, lookup_name=...):
        ...
    


def select_related_descend(field, restricted, requested, load_fields, reverse=...): # -> bool:
    """
    Return True if this field should be used to descend deeper for
    select_related() purposes. Used by both the query construction code
    (compiler.get_related_selections()) and the model instance creation code
    (compiler.klass_info).

    Arguments:
     * field - the field to be checked
     * restricted - a boolean field, indicating if the field list has been
       manually restricted using a requested clause)
     * requested - The select_related() dictionary.
     * load_fields - the set of fields to be loaded on this model
     * reverse - boolean, True if we are checking a reverse select related
    """
    ...

def refs_expression(lookup_parts, annotations): # -> tuple[Unknown, Unknown] | tuple[Literal[False], tuple[()]]:
    """
    Check if the lookup_parts contains references to the given annotations set.
    Because the LOOKUP_SEP is contained in the default annotation names, check
    each prefix of the lookup_parts for a match.
    """
    ...

def check_rel_lookup_compatibility(model, target_opts, field): # -> Any | bool:
    """
    Check that self.model is compatible with target_opts. Compatibility
    is OK if:
      1) model and opts match (where proxy inheritance is removed)
      2) model is parent of opts' model or the other way around
    """
    ...

class FilteredRelation:
    """Specify custom filtering in the ON clause of SQL joins."""
    def __init__(self, relation_name, *, condition=...) -> None:
        ...
    
    def __eq__(self, other) -> bool:
        ...
    
    def clone(self): # -> FilteredRelation:
        ...
    
    def resolve_expression(self, *args, **kwargs):
        """
        QuerySet.annotate() only accepts expression-like arguments
        (with a resolve_expression() method).
        """
        ...
    
    def as_sql(self, compiler, connection):
        ...
    


