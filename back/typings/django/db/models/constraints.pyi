"""
This type stub file was generated by pyright.
"""

from enum import Enum

__all__ = ["BaseConstraint", "CheckConstraint", "Deferrable", "UniqueConstraint"]
class BaseConstraint:
    default_violation_error_message = ...
    violation_error_message = ...
    def __init__(self, name, violation_error_message=...) -> None:
        ...
    
    @property
    def contains_expressions(self): # -> Literal[False]:
        ...
    
    def constraint_sql(self, model, schema_editor):
        ...
    
    def create_sql(self, model, schema_editor):
        ...
    
    def remove_sql(self, model, schema_editor):
        ...
    
    def validate(self, model, instance, exclude=..., using=...):
        ...
    
    def get_violation_error_message(self):
        ...
    
    def deconstruct(self): # -> tuple[str, tuple[()], dict[str, Unknown]]:
        ...
    
    def clone(self): # -> BaseConstraint:
        ...
    


class CheckConstraint(BaseConstraint):
    def __init__(self, *, check, name, violation_error_message=...) -> None:
        ...
    
    def constraint_sql(self, model, schema_editor):
        ...
    
    def create_sql(self, model, schema_editor):
        ...
    
    def remove_sql(self, model, schema_editor):
        ...
    
    def validate(self, model, instance, exclude=..., using=...): # -> None:
        ...
    
    def __repr__(self): # -> str:
        ...
    
    def __eq__(self, other) -> bool:
        ...
    
    def deconstruct(self): # -> tuple[str, tuple[()], dict[str, Unknown]]:
        ...
    


class Deferrable(Enum):
    DEFERRED = ...
    IMMEDIATE = ...
    def __repr__(self): # -> str:
        ...
    


class UniqueConstraint(BaseConstraint):
    def __init__(self, *expressions, fields=..., name=..., condition=..., deferrable=..., include=..., opclasses=..., violation_error_message=...) -> None:
        ...
    
    @property
    def contains_expressions(self): # -> bool:
        ...
    
    def constraint_sql(self, model, schema_editor):
        ...
    
    def create_sql(self, model, schema_editor):
        ...
    
    def remove_sql(self, model, schema_editor):
        ...
    
    def __repr__(self): # -> str:
        ...
    
    def __eq__(self, other) -> bool:
        ...
    
    def deconstruct(self): # -> tuple[str, tuple[F | Unknown, ...], dict[str, Unknown]]:
        ...
    
    def validate(self, model, instance, exclude=..., using=...):
        ...
    


