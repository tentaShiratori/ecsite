"""
This type stub file was generated by pyright.
"""

from django.utils.functional import cached_property
from .mixins import FieldCacheMixin

"""
"Rel objects" for related fields.

"Rel objects" (for lack of a better name) carry information about the relation
modeled by a related field and provide some utility functions. They're stored
in the ``remote_field`` attribute of the field.

They also act as reverse fields for the purposes of the Meta API because
they're the closest concept currently available.
"""
class ForeignObjectRel(FieldCacheMixin):
    """
    Used by ForeignObject to store information about the relation.

    ``_meta.get_fields()`` returns this class to provide access to the field
    flags for the reverse relation.
    """
    auto_created = ...
    concrete = ...
    editable = ...
    is_relation = ...
    null = ...
    empty_strings_allowed = ...
    def __init__(self, field, to, related_name=..., related_query_name=..., limit_choices_to=..., parent_link=..., on_delete=...) -> None:
        ...
    
    @cached_property
    def hidden(self): # -> Literal[False]:
        ...
    
    @cached_property
    def name(self):
        ...
    
    @property
    def remote_field(self): # -> Unknown:
        ...
    
    @property
    def target_field(self):
        """
        When filtering against this relation, return the field on the remote
        model against which the filtering should happen.
        """
        ...
    
    @cached_property
    def related_model(self):
        ...
    
    @cached_property
    def many_to_many(self):
        ...
    
    @cached_property
    def many_to_one(self):
        ...
    
    @cached_property
    def one_to_many(self):
        ...
    
    @cached_property
    def one_to_one(self):
        ...
    
    def get_lookup(self, lookup_name):
        ...
    
    def get_internal_type(self):
        ...
    
    @property
    def db_type(self):
        ...
    
    def __repr__(self): # -> str:
        ...
    
    @property
    def identity(self): # -> tuple[Unknown, Unknown, Unknown | None, Unknown | None, tuple[tuple[Unknown, Unknown], ...] | tuple[Unknown, ...] | Unknown, bool, Unknown | None, bool, bool]:
        ...
    
    def __eq__(self, other) -> bool:
        ...
    
    def __hash__(self) -> int:
        ...
    
    def __getstate__(self): # -> dict[str, Any]:
        ...
    
    def get_choices(self, include_blank=..., blank_choice=..., limit_choices_to=..., ordering=...): # -> list[Unknown]:
        """
        Return choices with a default blank choices included, for use
        as <select> choices for this field.

        Analog of django.db.models.fields.Field.get_choices(), provided
        initially for utilization by RelatedFieldListFilter.
        """
        ...
    
    def is_hidden(self): # -> Literal[False]:
        """Should the related object be hidden?"""
        ...
    
    def get_joining_columns(self):
        ...
    
    def get_extra_restriction(self, alias, related_alias):
        ...
    
    def set_field_name(self): # -> None:
        """
        Set the related field's name, this is not available until later stages
        of app loading, so set_field_name is called from
        set_attributes_from_rel()
        """
        ...
    
    def get_accessor_name(self, model=...): # -> None:
        ...
    
    def get_path_info(self, filtered_relation=...):
        ...
    
    @cached_property
    def path_infos(self):
        ...
    
    def get_cache_name(self): # -> None:
        """
        Return the name of the cache key to use for storing an instance of the
        forward model on the reverse model.
        """
        ...
    


class ManyToOneRel(ForeignObjectRel):
    """
    Used by the ForeignKey field to store information about the relation.

    ``_meta.get_fields()`` returns this class to provide access to the field
    flags for the reverse relation.

    Note: Because we somewhat abuse the Rel objects by using them as reverse
    fields we get the funny situation where
    ``ManyToOneRel.many_to_one == False`` and
    ``ManyToOneRel.one_to_many == True``. This is unfortunate but the actual
    ManyToOneRel class is a private API and there is work underway to turn
    reverse relations into actual fields.
    """
    def __init__(self, field, to, field_name, related_name=..., related_query_name=..., limit_choices_to=..., parent_link=..., on_delete=...) -> None:
        ...
    
    def __getstate__(self): # -> dict[str, Any]:
        ...
    
    @property
    def identity(self): # -> tuple[Unknown, Unknown, Unknown | None, Unknown | None, tuple[tuple[Unknown, Unknown], ...] | tuple[Unknown, ...] | Unknown, bool, Unknown | None, bool, bool, Unknown]:
        ...
    
    def get_related_field(self):
        """
        Return the Field in the 'to' object to which this relationship is tied.
        """
        ...
    
    def set_field_name(self): # -> None:
        ...
    


class OneToOneRel(ManyToOneRel):
    """
    Used by OneToOneField to store information about the relation.

    ``_meta.get_fields()`` returns this class to provide access to the field
    flags for the reverse relation.
    """
    def __init__(self, field, to, field_name, related_name=..., related_query_name=..., limit_choices_to=..., parent_link=..., on_delete=...) -> None:
        ...
    


class ManyToManyRel(ForeignObjectRel):
    """
    Used by ManyToManyField to store information about the relation.

    ``_meta.get_fields()`` returns this class to provide access to the field
    flags for the reverse relation.
    """
    def __init__(self, field, to, related_name=..., related_query_name=..., limit_choices_to=..., symmetrical=..., through=..., through_fields=..., db_constraint=...) -> None:
        ...
    
    @property
    def identity(self): # -> tuple[Unknown, Unknown, Unknown | None, Unknown | None, tuple[tuple[Unknown, Unknown], ...] | tuple[Unknown, ...] | Unknown, bool, Unknown | None, bool, bool, Unknown | None, tuple[tuple[Unknown, Unknown], ...] | tuple[Unknown, ...] | Unknown | None, bool]:
        ...
    
    def get_related_field(self):
        """
        Return the field in the 'to' object to which this relationship is tied.
        Provided for symmetry with ManyToOneRel.
        """
        ...
    


