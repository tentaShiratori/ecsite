"""
This type stub file was generated by pyright.
"""

from django.utils import tree
from django.utils.functional import cached_property

"""
Code to manage the creation and SQL rendering of 'where' constraints.
"""
AND = ...
OR = ...
XOR = ...
class WhereNode(tree.Node):
    """
    An SQL WHERE clause.

    The class is tied to the Query class that created it (in order to create
    the correct SQL).

    A child is usually an expression producing boolean values. Most likely the
    expression is a Lookup instance.

    However, a child could also be any class with as_sql() and either
    relabeled_clone() method or relabel_aliases() and clone() methods and
    contains_aggregate attribute.
    """
    default = ...
    resolved = ...
    conditional = ...
    def split_having(self, negated=...): # -> tuple[Self@WhereNode, None] | tuple[None, Self@WhereNode] | tuple[WhereNode | None, WhereNode | None]:
        """
        Return two possibly None nodes: one for those parts of self that
        should be included in the WHERE clause and one for those parts of
        self that must be included in the HAVING clause.
        """
        ...
    
    def as_sql(self, compiler, connection): # -> tuple[Literal[''], list[Unknown]] | tuple[Unknown | str, list[Unknown]]:
        """
        Return the SQL version of the where clause and the value to be
        substituted in. Return '', [] if this node matches everything,
        None, [] if this node is empty, and raise EmptyResultSet if this
        node can't match anything.
        """
        ...
    
    def get_group_by_cols(self, alias=...): # -> list[Unknown]:
        ...
    
    def get_source_expressions(self):
        ...
    
    def set_source_expressions(self, children): # -> None:
        ...
    
    def relabel_aliases(self, change_map): # -> None:
        """
        Relabel the alias values of any children. 'change_map' is a dictionary
        mapping old (current) alias values to the new values.
        """
        ...
    
    def clone(self): # -> Node:
        """
        Create a clone of the tree. Must only be called on root nodes (nodes
        with empty subtree_parents). Childs must be either (Constraint, lookup,
        value) tuples, or objects supporting .clone().
        """
        ...
    
    def relabeled_clone(self, change_map): # -> Node:
        ...
    
    def copy(self): # -> Node:
        ...
    
    @cached_property
    def contains_aggregate(self): # -> bool:
        ...
    
    @cached_property
    def contains_over_clause(self): # -> bool:
        ...
    
    def resolve_expression(self, *args, **kwargs): # -> Node:
        ...
    
    @cached_property
    def output_field(self): # -> BooleanField:
        ...
    
    def select_format(self, compiler, sql, params): # -> tuple[str | Unknown, Unknown]:
        ...
    
    def get_db_converters(self, connection):
        ...
    
    def get_lookup(self, lookup):
        ...
    


class NothingNode:
    """A node that matches nothing."""
    contains_aggregate = ...
    def as_sql(self, compiler=..., connection=...):
        ...
    


class ExtraWhere:
    contains_aggregate = ...
    def __init__(self, sqls, params) -> None:
        ...
    
    def as_sql(self, compiler=..., connection=...): # -> tuple[LiteralString, list[Any]]:
        ...
    


class SubqueryConstraint:
    contains_aggregate = ...
    def __init__(self, alias, columns, targets, query_object) -> None:
        ...
    
    def as_sql(self, compiler, connection):
        ...
    


