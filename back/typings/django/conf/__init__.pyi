"""
This type stub file was generated by pyright.
"""

import importlib
import os
import time
import traceback
import warnings
import django
from pathlib import Path
from django.conf import global_settings
from django.core.exceptions import ImproperlyConfigured
from django.utils.deprecation import RemovedInDjango50Warning
from django.utils.functional import LazyObject, empty

"""
Settings and configuration for Django.

Read values from the module specified by the DJANGO_SETTINGS_MODULE environment
variable, and then from django.conf.global_settings; see the global_settings.py
for a list of all possible variables.
"""
ENVIRONMENT_VARIABLE = ...
USE_DEPRECATED_PYTZ_DEPRECATED_MSG = ...
USE_L10N_DEPRECATED_MSG = ...
CSRF_COOKIE_MASKED_DEPRECATED_MSG = ...
class SettingsReference(str):
    """
    String subclass which references a current settings value. It's treated as
    the value in memory but serializes to a settings.NAME attribute reference.
    """
    def __new__(self, value, setting_name): # -> Self@SettingsReference:
        ...
    
    def __init__(self, value, setting_name) -> None:
        ...
    


class LazySettings(LazyObject):
    """
    A lazy proxy for either global Django settings or a custom settings object.
    The user can manually configure settings prior to using them. Otherwise,
    Django uses the settings module pointed to by DJANGO_SETTINGS_MODULE.
    """
    def __repr__(self): # -> str:
        ...
    
    def __getattr__(self, name): # -> Any | str:
        """Return the value of a setting and cache it in self.__dict__."""
        ...
    
    def __setattr__(self, name, value): # -> None:
        """
        Set the value of setting. Clear all cached values if _wrapped changes
        (@override_settings does this) or clear single values when set.
        """
        ...
    
    def __delattr__(self, name): # -> None:
        """Delete a setting and clear it from cache if needed."""
        ...
    
    def configure(self, default_settings=..., **options): # -> None:
        """
        Called to manually configure the settings. The 'default_settings'
        parameter sets where to retrieve any unspecified values from (its
        argument must support attribute access (__getattr__)).
        """
        ...
    
    @property
    def configured(self): # -> bool:
        """Return True if the settings have already been configured."""
        ...
    
    @property
    def USE_L10N(self): # -> Any | str:
        ...
    


class Settings:
    def __init__(self, settings_module) -> None:
        ...
    
    def is_overridden(self, setting): # -> bool:
        ...
    
    def __repr__(self): # -> str:
        ...
    


class UserSettingsHolder:
    """Holder for user configured settings."""
    SETTINGS_MODULE = ...
    def __init__(self, default_settings) -> None:
        """
        Requests for configuration variables not in this class are satisfied
        from the module specified in default_settings (if possible).
        """
        ...
    
    def __getattr__(self, name): # -> Any:
        ...
    
    def __setattr__(self, name, value): # -> None:
        ...
    
    def __delattr__(self, name): # -> None:
        ...
    
    def __dir__(self): # -> list[str]:
        ...
    
    def is_overridden(self, setting): # -> Any | bool:
        ...
    
    def __repr__(self): # -> str:
        ...
    


settings = ...
