"""
This type stub file was generated by pyright.
"""

import functools
from django.utils.functional import cached_property

"""
This module converts requested URLs to callback view functions.

URLResolver is the main class here. Its resolve() method takes a URL (as
a string) and returns a ResolverMatch object which provides access to all
attributes of the resolved URL match.
"""
class ResolverMatch:
    def __init__(self, func, args, kwargs, url_name=..., app_names=..., namespaces=..., route=..., tried=..., captured_kwargs=..., extra_kwargs=...) -> None:
        ...
    
    def __getitem__(self, index): # -> Unknown:
        ...
    
    def __repr__(self): # -> str:
        ...
    
    def __reduce_ex__(self, protocol):
        ...
    


def get_resolver(urlconf=...): # -> URLResolver:
    ...

@functools.lru_cache(maxsize=None)
def get_ns_resolver(ns_pattern, resolver, converters): # -> URLResolver:
    ...

class LocaleRegexDescriptor:
    def __init__(self, attr) -> None:
        ...
    
    def __get__(self, instance, cls=...): # -> Self@LocaleRegexDescriptor:
        """
        Return a compiled regular expression based on the active language.
        """
        ...
    


class CheckURLMixin:
    def describe(self): # -> str:
        """
        Format the URL pattern for display in warning messages.
        """
        ...
    


class RegexPattern(CheckURLMixin):
    regex = ...
    def __init__(self, regex, name=..., is_endpoint=...) -> None:
        ...
    
    def match(self, path): # -> tuple[Unknown, tuple[()] | Unknown, dict[Unknown, Unknown]] | None:
        ...
    
    def check(self): # -> list[Unknown]:
        ...
    
    def __str__(self) -> str:
        ...
    


_PATH_PARAMETER_COMPONENT_RE = ...
class RoutePattern(CheckURLMixin):
    regex = ...
    def __init__(self, route, name=..., is_endpoint=...) -> None:
        ...
    
    def match(self, path): # -> tuple[Unknown, tuple[()], Unknown] | None:
        ...
    
    def check(self): # -> list[Unknown] | list[Warning]:
        ...
    
    def __str__(self) -> str:
        ...
    


class LocalePrefixPattern:
    def __init__(self, prefix_default_language=...) -> None:
        ...
    
    @property
    def regex(self): # -> Pattern[Any | str]:
        ...
    
    @property
    def language_prefix(self): # -> Any | Literal['']:
        ...
    
    def match(self, path): # -> tuple[Unknown, tuple[()], dict[Unknown, Unknown]] | None:
        ...
    
    def check(self): # -> list[Unknown]:
        ...
    
    def describe(self): # -> str:
        ...
    
    def __str__(self) -> str:
        ...
    


class URLPattern:
    def __init__(self, pattern, callback, default_args=..., name=...) -> None:
        ...
    
    def __repr__(self): # -> str:
        ...
    
    def check(self): # -> list[Warning] | list[Unknown]:
        ...
    
    def resolve(self, path): # -> ResolverMatch | None:
        ...
    
    @cached_property
    def lookup_str(self): # -> str | Any:
        """
        A string that identifies the view (e.g. 'path.to.view_function' or
        'path.to.ClassBasedView').
        """
        ...
    


class URLResolver:
    def __init__(self, pattern, urlconf_name, default_kwargs=..., app_name=..., namespace=...) -> None:
        ...
    
    def __repr__(self): # -> str:
        ...
    
    def check(self): # -> list[Unknown]:
        ...
    
    @property
    def reverse_dict(self):
        ...
    
    @property
    def namespace_dict(self):
        ...
    
    @property
    def app_dict(self):
        ...
    
    def resolve(self, path): # -> ResolverMatch:
        ...
    
    @cached_property
    def urlconf_module(self): # -> ModuleType | Unknown:
        ...
    
    @cached_property
    def url_patterns(self): # -> Any | cached_property:
        ...
    
    def resolve_error_handler(self, view_type): # -> Any:
        ...
    
    def reverse(self, lookup_view, *args, **kwargs): # -> str:
        ...
    


