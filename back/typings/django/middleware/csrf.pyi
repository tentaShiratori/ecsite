"""
This type stub file was generated by pyright.
"""

from django.utils.deprecation import MiddlewareMixin
from django.utils.functional import cached_property

"""
Cross Site Request Forgery Middleware.

This module provides a middleware that implements protection
against request forgeries from other sites.
"""
logger = ...
invalid_token_chars_re = ...
REASON_BAD_ORIGIN = ...
REASON_NO_REFERER = ...
REASON_BAD_REFERER = ...
REASON_NO_CSRF_COOKIE = ...
REASON_CSRF_TOKEN_MISSING = ...
REASON_MALFORMED_REFERER = ...
REASON_INSECURE_REFERER = ...
REASON_INCORRECT_LENGTH = ...
REASON_INVALID_CHARACTERS = ...
CSRF_SECRET_LENGTH = ...
CSRF_TOKEN_LENGTH = ...
CSRF_ALLOWED_CHARS = ...
CSRF_SESSION_KEY = ...
def get_token(request): # -> str:
    """
    Return the CSRF token required for a POST form. The token is an
    alphanumeric value. A new token is created if one is not already set.

    A side effect of calling this function is to make the csrf_protect
    decorator and the CsrfViewMiddleware add a CSRF cookie and a 'Vary: Cookie'
    header to the outgoing response.  For this reason, you may need to use this
    function lazily, as is done by the csrf context processor.
    """
    ...

def rotate_token(request): # -> None:
    """
    Change the CSRF token in use for a request - should be done on login
    for security purposes.
    """
    ...

class InvalidTokenFormat(Exception):
    def __init__(self, reason) -> None:
        ...
    


class RejectRequest(Exception):
    def __init__(self, reason) -> None:
        ...
    


class CsrfViewMiddleware(MiddlewareMixin):
    """
    Require a present and correct csrfmiddlewaretoken for POST requests that
    have a CSRF cookie, and set an outgoing CSRF cookie.

    This middleware should be used in conjunction with the {% csrf_token %}
    template tag.
    """
    @cached_property
    def csrf_trusted_origins_hosts(self): # -> list[Unknown]:
        ...
    
    @cached_property
    def allowed_origins_exact(self): # -> set[Any]:
        ...
    
    @cached_property
    def allowed_origin_subdomains(self): # -> defaultdict[Unknown, list[Unknown]]:
        """
        A mapping of allowed schemes to list of allowed netlocs, where all
        subdomains of the netloc are allowed.
        """
        ...
    
    def process_request(self, request): # -> None:
        ...
    
    def process_view(self, request, callback, callback_args, callback_kwargs): # -> Any | None:
        ...
    
    def process_response(self, request, response):
        ...
    


