"""
This type stub file was generated by pyright.
"""

from django import template

register = ...
class PrefixNode(template.Node):
    def __repr__(self):
        ...
    
    def __init__(self, varname=..., name=...) -> None:
        ...
    
    @classmethod
    def handle_token(cls, parser, token, name): # -> Self@PrefixNode:
        """
        Class method to parse prefix node and return a Node.
        """
        ...
    
    @classmethod
    def handle_simple(cls, name): # -> Any | str:
        ...
    
    def render(self, context): # -> Any | str:
        ...
    


@register.tag
def get_static_prefix(parser, token): # -> PrefixNode:
    """
    Populate a template variable with the static prefix,
    ``settings.STATIC_URL``.

    Usage::

        {% get_static_prefix [as varname] %}

    Examples::

        {% get_static_prefix %}
        {% get_static_prefix as static_prefix %}
    """
    ...

@register.tag
def get_media_prefix(parser, token): # -> PrefixNode:
    """
    Populate a template variable with the media prefix,
    ``settings.MEDIA_URL``.

    Usage::

        {% get_media_prefix [as varname] %}

    Examples::

        {% get_media_prefix %}
        {% get_media_prefix as media_prefix %}
    """
    ...

class StaticNode(template.Node):
    child_nodelists = ...
    def __init__(self, varname=..., path=...) -> None:
        ...
    
    def __repr__(self): # -> str:
        ...
    
    def url(self, context): # -> Any | str:
        ...
    
    def render(self, context): # -> Any | SafeString | str:
        ...
    
    @classmethod
    def handle_simple(cls, path): # -> Any | str:
        ...
    
    @classmethod
    def handle_token(cls, parser, token): # -> Self@StaticNode:
        """
        Class method to parse prefix node and return a Node.
        """
        ...
    


@register.tag("static")
def do_static(parser, token): # -> StaticNode:
    """
    Join the given path with the STATIC_URL setting.

    Usage::

        {% static path [as varname] %}

    Examples::

        {% static "myapp/css/base.css" %}
        {% static variable_with_path %}
        {% static "myapp/css/base.css" as admin_base_css %}
        {% static variable_with_path as varname %}
    """
    ...

def static(path): # -> Any | str:
    """
    Given a relative path to a static asset, return the absolute path to the
    asset.
    """
    ...

